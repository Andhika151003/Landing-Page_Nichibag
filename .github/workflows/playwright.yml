# Nama alur kerja (workflow)
name: Playwright CI/CD

# Pemicu (trigger) untuk menjalankan alur kerja
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Daftar pekerjaan (jobs) yang akan dijalankan
jobs:
  test:
    # Mengatur batas waktu eksekusi job menjadi 20 menit
    timeout-minutes: 20
    # Menjalankan di lingkungan Ubuntu versi terbaru
    runs-on: ubuntu-latest

    # Menyiapkan service eksternal (dalam hal ini, database MongoDB)
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        # Tambahkan health check untuk memastikan MongoDB siap
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
    # 1. Mengunduh kode dari repositori
    - name: Check out repository
      uses: actions/checkout@v4

    # 2. Menyiapkan lingkungan Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'

    # 3. Instal dependensi untuk direktori root (frontend)
    - name: Install root dependencies
      run: npm ci

    # 4. Instal dependensi untuk server (backend)
    - name: Install backend dependencies
      run: npm ci --prefix Server

    # 5. Instal browser yang dibutuhkan oleh Playwright
    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    # 6. Tunggu MongoDB siap
    - name: Wait for MongoDB
      run: |
        timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
        echo "MongoDB is ready"

    # 7. Menjalankan server backend di background
    - name: Run backend in background
      env:
        # Gunakan MongoDB lokal untuk testing
        MONGO_URI: mongodb://localhost:27017/test_database
        PORT: 5000
        NODE_ENV: test
        # Tambahkan environment variables lain yang mungkin dibutuhkan
        JWT_SECRET: test-jwt-secret-key
        SESSION_SECRET: test-session-secret
      run: |
        echo "Starting backend with MONGO_URI: $MONGO_URI"
        # Coba dengan npm run dev jika start tidak work
        cd Server && (npm start || npm run dev) > ../backend.log 2>&1 &
        echo $! > ../backend.pid
        sleep 5  # Tunggu sebentar untuk backend start

    # 8. Menjalankan server frontend di background  
    - name: Run frontend in background
      run: |
        npm run dev > frontend.log 2>&1 &
        echo $! > frontend.pid

    # 9. Menunggu hingga kedua server siap menerima koneksi dengan timeout
    - name: Wait for servers to be ready
      run: |
        echo "Waiting for backend on port 5000..."
        npx wait-on http://localhost:5000 --timeout 120000 --interval 2000
        echo "Backend is ready!"
        
        echo "Waiting for frontend on port 5173..."
        npx wait-on http://localhost:5173 --timeout 120000 --interval 2000
        echo "Frontend is ready!"

    # 10. Debug: Cek status server dan log
    - name: Check servers status
      run: |
        echo "=== Backend Log (last 20 lines) ==="
        tail -20 backend.log || echo "No backend log found"
        echo "=== Frontend Log (last 10 lines) ==="
        tail -10 frontend.log || echo "No frontend log found"
        echo "=== Backend Status ==="
        curl -I http://localhost:5000 || echo "Backend check failed"
        echo "=== Frontend Status ==="
        curl -I http://localhost:5173 || echo "Frontend check failed"
        echo "=== Running Processes ==="
        ps aux | grep -E "(node|npm)" | grep -v grep

    # 11. Menjalankan tes Playwright
    - name: Run Playwright tests
      run: npx playwright test

    # 12. Upload logs jika ada kegagalan
    - name: Upload logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: server-logs
        path: |
          backend.log
          frontend.log
        retention-days: 3

    # 13. Upload test report jika terjadi kegagalan
    - name: Upload test report on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7

    # 14. Cleanup: Stop servers
    - name: Stop servers
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
        fi
        if [ -f frontend.pid ]; then
          kill $(cat frontend.pid) || true
        fi